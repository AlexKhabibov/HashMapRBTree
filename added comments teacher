class RedBlackNode:
  
    def __init__(self, value):
        if not isinstance(value, int):
            raise ValueError

        self.value = value
        self.left = None
        self.right = None
        self.color = 'RED'


class RedBlackTree:
   
    def __init__(self):
        self.root = None

    def insert_with_balance(self, value):
        
        def _insert_recursive(node, value):
           
            if not node:
                return RedBlackNode(value)

            if value < node.value:
                node.left = _insert_recursive(node.left, value)
            elif value > node.value:
                node.right = _insert_recursive(node.right, value)

            return self._balance(node)

        self.root = _insert_recursive(self.root, value)

    def search(self, value):
       
        def _search_recursive(node, value):
            
            if not node or node.value == value:
                return node
            if value < node.value:
                return _search_recursive(node.left, value)
            return _search_recursive(node.right, value)

        return _search_recursive(self.root, value)

    def traverse_inorder(self):
       
        def _traverse_inorder(node):
           
            if node:
                _traverse_inorder(node.left)
                print(node.value)
                _traverse_inorder(node.right)

        _traverse_inorder(self.root)

    def _balance(self, node):
  
        if not node:
            return node

        if self._is_red(node.left) and self._is_red(node.left.left):
            node = self._rotate_right(node)

        if self._is_red(node.right):
            node = self._rotate_left(node)

        if self._is_red(node.left) and self._is_red(node.right):
            self._flip_colors(node)

        return node

    def _is_red(self, node):
       
        if not node:
            return False
        return node.color == "RED"

    def _rotate_left(self, node):
       
        new_root = node.right
        node.right = new_root.left
        new_root.left = node
        new_root.color = node.color
        node.color = "RED"
        return new_root

    def _rotate_right(self, node):
        
        new_root = node.left
        node.left = new_root.right
        new_root.right = node
        new_root.color = node.color
        node.color = "RED"
        return new_root

    def _flip_colors(self, node):
       
        node.color = "RED"
        node.left.color = "BLACK"
        node.right.color = "BLACK"


red_black_tree = RedBlackTree()

red_black_tree.insert_with_balance(10)
red_black_tree.insert_with_balance(20)
red_black_tree.insert_with_balance(5)
red_black_tree.insert_with_balance(15)

result_node = red_black_tree.search(20)
if result_node:
    print(f'Элемент {result_node.value} найден')
else:
    print('Элемента нет')

red_black_tree.traverse_inorder()

# Советы от преподавателя:

# Алексей, проверил вашу работу, вижу вы постарались переработать нашу структуру данных на пайтоне, хорошая работа. По самой доработке перечисления в рамках нашей структуры HashMap могу продемонстрировать вам следующую конструкцию, основанную на интерфейсе Iterable:

# public class HashMap<K, V> implements Iterable<HashMap.Entity>
# Тут, элементом коллекции HashMap выступает Entity, который содержит ключ + значение, имплементируем интерфейс:
# public class HashMap <K, V> implements Iterable<HashMap.Entity>

#     private static final int INIT_BUCKET_COUNT = 16;

#     private Bucket[] buckets;
#     private Bucket.Node currentNode;
#     private int currentIndex;

#     @Override
#     public Iterator<HashMap.Entity> iterator() {
#         return new HashMapIterator();
#     }
# Создаем класс HashMapIterator, имплементирующий интерфейс Iterator<HashMap.Entity>:
# class HashMapIterator implements Iterator<HashMap.Entity>{

#         @Override
#         public boolean hasNext() {
#             if (currentNode == null){
#                 for (int i = 0; i < buckets.length; i++)
#                     if (buckets[i] != null && buckets[i].head != null){
#                         currentIndex = i;
#                         currentNode = buckets[i].head;
#                         return true;
#                     }
#                 return false;
#             }
#             else{
#                 if (get((K)currentNode.value.key) == null)
#                 {
#                     currentNode = null;
#                     currentIndex = 0;
#                     return hasNext();
#                 }
#                 else{
#                     HashMap.Bucket.Node node = currentNode;
#                     currentIndex = calculateBucketIndex((K)node.value.key);
#                     if (node.next != null){
#                         currentNode = node.next;
#                         return true;
#                     }
#                     for (int i = ++currentIndex; i < buckets.length; i++){
#                         if (buckets[i] != null && buckets[i].head != null){
#                             currentIndex = i;
#                             currentNode = buckets[i].head;
#                             return true;
#                         }
#                     }
#                     currentNode = null;
#                     currentIndex = 0;
#                     return false;
#                 }
#             }
#         }

#         @Override
#         public Entity next() {
#             if (currentNode == null){
#                 for (int i = 0; i < buckets.length; i++)
#                     if (buckets[i] != null && buckets[i].head != null){
#                         currentIndex = i;
#                         currentNode = buckets[i].head;
#                         return currentNode.value;
#                     }
#                 return null;
#             }
#             else if (get((K)currentNode.value.key) == null){
#                 currentNode = null;
#                 currentIndex = 0;
#                 return null;
#             }
#             else
#                 return currentNode.value;
#         }
#     }
# И вот теперь можно протестирвать перебор всех элементов коллекции HashMap:
# for (HashMap.Entity entity: hashMap1) {
#         System.out.println(entity);
# }
# Основной плюс подобного подхода, в рамках перечисления, через Entity, вы получаете доступ к ключу и значению очередного элемента.
